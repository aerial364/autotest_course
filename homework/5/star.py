# Напишите функцию to_roman, которая преобразуют арабское число (val) в римское (roman_str).
#
# Современные римские цифры записываются, выражая каждую цифру отдельно,
# начиная с самой левой цифры и пропуская цифру со значением нуля.
# Римскими цифрами 1990 отображается: 1000=М, 900=СМ, 90=ХС; в результате MCMXC.
# 2023 записывается как 2000=MM, 20=XX, 3=III; или MMXXIII.
# В 1666 используется каждый римский символ в порядке убывания: MDCLXVI.
#
# Например (Ввод --> Вывод) :
# 2008 --> MMVIII

def to_roman(val):
    # Здесь нужно написать код
    # Запишем в словари обозначение чисел, подробив на количество знаков после цифры
    n0 = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX'}  # 1, 2, ... 9
    n1 = {1: 'X', 2: 'XX', 3: 'XXX', 4: 'XL', 5: 'L', 6: 'LX', 7: 'LXX', 8: 'LXXX', 9: 'XC'}  # 10, 20, ... 90
    n2 = {1: 'C', 2: 'CC', 3: 'CCC', 4: 'CD', 5: 'D', 6: 'DC', 7: 'DCC', 8: 'DCCC', 9: 'CM'}  # 100, 200, ... 900
    n3 = {1: 'M', 2: 'MM', 3: 'MMM'}  # 1000, 2000, 3000
    val = str(val)  # Переведём число в string для обращения к отдельным символам
    length = 0  # Переменная для определения длинны целого числа 1, 10, 100 или 1000
    roman_str = ''  # Строка, куда будем записывать римские символы

    # Перебираем каждый символы в числе
    for i in range(len(val)):
        if val[i] == '0':
            continue  # Закончим итерацию, если число = 0
        else:
            length = len(val) - i - 1  # Определяем кол-во цифр после взятой цифры
            if length == 3:  # Если 1000 (3 цифры после числа)
                roman_str += n3.__getitem__(int(val[i]))  # Добавим символ из справочника тысяч
            elif length == 2: # Если 100 (2 цифры после числа)
                roman_str += n2.__getitem__(int(val[i]))  # Добавим символ из справочника сотен
            elif length == 1: # Если 10 (1 цифра после числа)
                roman_str += n1.__getitem__(int(val[i]))  # Добавим символ из справочника десятков
            elif length == 0: # Если 1 (Нет цифр после числа)
                roman_str += n0.__getitem__(int(val[i]))  # Добавим символ из справочника единиц

    return roman_str

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [1133, 2224, 1938, 1817, 2505, 391, 3743, 1634, 699, 1666, 1494, 1444]

test_data = [
    "MCXXXIII", "MMCCXXIV", "MCMXXXVIII", "MDCCCXVII", "MMDV", "CCCXCI", 'MMMDCCXLIII', 'MDCXXXIV', 'DCXCIX', 'MDCLXVI',
    'MCDXCIV', 'MCDXLIV']


for i, d in enumerate(data):
    assert to_roman(d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')